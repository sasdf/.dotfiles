# kakoune configuration


# Plugins
# ───────
evaluate-commands %sh{
    autoload_directory() {
        find -L "$1" -type f -name '*\.kak' \
            | sed 's/.*/try %{ source "&" } catch %{ echo -debug Autoload: could not load "&" }/'
    }
    autoload_directory ${kak_config}/plugins
}


# User interface
# ──────────────
colorscheme tomorrow-night
add-highlighter global/ number-lines -relative -hlcursor -separator '  '
add-highlighter global/ wrap


# Goodbye, CLIPPY
# ───────────────
set-option global ui_options ncurses_assistant=none


# Avoid closing accidentally
# ──────────────────────────
alias global qu quit
alias global qu! quit!
unalias global q
unalias global q!
define-command -override -hidden q 'echo Use :qu to quit'
alias global q! q


# Commenter
# ─────────
map global normal '#' ': comment-line<ret>'


# Map jk to esc
# ─────────
hook global InsertChar k %{ try %{
    exec -draft hH <a-k>jk<ret> d
    exec <esc>
}}
hook global InsertChar j %{ try %{
    exec -draft hH <a-k>kj<ret> d
    exec <esc>
}}


# Use Ctrl-t to go up menu ( dvorak layout )
map global insert <c-t> <c-p>
map global normal <c-t> <c-p>



# CamelCase movement
# ──────────────────
define-command -hidden select-prev-word-part %{
  # Reverse search and ignore spaces
  exec <a-/>
  # Non-words and digits
  exec [^0-9A-Za-z\s]|[0-9]+|
  # lowercase
  exec ((?<lt>![A-Za-z])|(?<lt>=[A-Z][A-Z]))[a-z]+|
  # CamelCase and UPPERCASE
  exec (?<lt>![A-Z])[A-Z]([a-z]+|[A-Z]+|(?![A-Za-z]))
  # Execute
  exec <ret>
}
define-command -hidden select-next-word-part %{
  # Forward search and ignore spaces
  exec /
  # Non-words and digits
  exec [^0-9A-Za-z\s]|[0-9]+|
  # lowercase
  exec [a-z]+|
  # CamelCase and UPPERCASE
  exec [A-Z]([a-z]+|[A-Z]+|(?![A-Za-z]))
  # Execute
  exec <ret>
}
define-command -hidden extend-prev-word-part %{
  # Reverse search and ignore spaces
  exec <a-?>
  # Non-words and digits
  exec [^0-9A-Za-z\s]|[0-9]+|
  # lowercase
  exec ((?<lt>![A-Za-z])|(?<lt>=[A-Z][A-Z]))[a-z]+|
  # CamelCase and UPPERCASE
  exec (?<lt>![A-Z])[A-Z]([a-z]+|[A-Z]+|(?![A-Za-z]))
  # Execute
  exec <ret>
}
define-command -hidden extend-next-word-part %{
  # Forward search
  exec ?
  # Non-words and digits
  exec [^0-9A-Za-z\s]|[0-9]+|
  # lowercase
  exec [a-z]+|
  # CamelCase and UPPERCASE
  exec [A-Z]([a-z]+|[A-Z]+|(?![A-Za-z]))
  # Execute
  exec <ret>
}
map global normal w :select-next-word-part<ret>
map global normal W :extend-next-word-part<ret>
map global normal b :select-prev-word-part<ret>
map global normal B :extend-prev-word-part<ret>


# Select Lines
# ───────────
define-command -hidden -params 1 extend-line-down %{
  try %{
      exec -draft s^.*$<ret>
      exec %arg{1}J
  }
  exec <a-x>
}
define-command -hidden -params 1 extend-line-up %{
  try %{
      exec -draft s^.*$<ret>
      exec %arg{1}K
  }
  exec <a-x>
}
map global normal x ':extend-line-down %val{count}<ret>'
map global normal X ':extend-line-up %val{count}<ret>'


# Highlight the word under the cursor
# ───────────────────────────────────
declare-option -hidden regex curword

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A[\w\-]+\z<ret>
        exec -draft "/%val{selection}.*?%val{selection}<ret>"
        set-option buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set-option buffer curword ''
    } }
}
add-highlighter global/ dynregex '%opt{curword}' 0:CurWord
set-face global CurWord default,rgb:000000


# Clear search pattern
# ────────────────────
map global user -docstring 'clear search pattern' c ':set-register "/" ""<ret><c-l>'


# Highlight matches
# ─────────────────
add-highlighter global/ show-matching
add-highlighter global/ dynregex '%reg{/}' 0:+u


# System clipboard handling
# ─────────────────────────
eval %sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}


# Auto-completion Language Server
# ─────────────────────────
define-command -hidden enable-kak-lsp %{
    lsp-enable-window
    # Replace lsp-start with following commad to debug
    # nop %sh{ (kak-lsp -s $kak_session -vvv) > /tmp/kak-lsp.log 2>&1 < /dev/null & }
    lsp-auto-signature-help-enable
}

define-command -hidden start-kak-lsp-callback %{
    lsp-stop-on-exit-enable
    map global user -docstring 'Enable lsp' l ':enable-kak-lsp<ret>'
    map global user -docstring 'Enable lsp auto hover' d ':lsp-auto-hover-enable<ret>'
    map global user -docstring 'Disable lsp auto hover' D ':lsp-auto-hover-disable<ret>'
    map global user -docstring 'Hover lsp information' h ':lsp-hover<ret>'
    map global goto -docstring 'diagnostics' D ':lsp-diagnostics<ret>'
    map global goto -docstring 'references' r ':lsp-references<ret>'
}

eval %sh{
    kak-lsp --kakoune -s $kak_session && \
    echo "start-kak-lsp-callback"
}


# Indent
# ──────
# map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><lt>'
declare-option bool expandtab true
hook global InsertChar \t %{ try %{
    execute-keys -draft %sh{
        if [ "$kak_opt_expandtab" == "true" ]; then
            printf ';<a-;><a-gt>hd'
        fi
    }
}}
hook global InsertDelete ' ' %{ try %{
    execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}
define-command -hidden set-indent-impl %{
    evaluate-commands %sh{
        if ! [ "$kak_text" -eq "$kak_text" ]; then
            printf "%s\n" 'echo "Error: indent should be zero (disable) or a positive number"'
            exit
        fi
        if [ "$kak_text" -gt "0" ]; then
            printf "%s\n" 'set-option buffer expandtab true'
            printf "%s\n" 'set-option buffer indentwidth "%val{text}"'
            printf "%s\n" 'echo "Set indent width to %val{text}"'
        elif [ "$kak_text" -eq "0" ]; then
            printf "%s\n" 'set-option buffer expandtab false'
            printf "%s\n" 'echo Disable indent'
        elif [ "$kak_text" -lt "0" ]; then
            printf "%s\n" 'echo "Error: indent should be zero (disable) or a positive number"'
        fi
    }
}
define-command -docstring 'Prompt for setting indent' set-indent %{
    prompt indent: 'set-indent-impl'
}
map global user -docstring 'set indent' i ':set-indent<ret>'



# Buffer
# ──────
hook global WinDisplay .* bufs-update

declare-user-mode bufs
def bufs-update -docstring 'populate an selection UI with a numbered buffers list' %{
  refresh-buffers-info
  evaluate-commands %sh{
    # find offset
    eval "set -- $kak_opt_buffers_info"
    offset=-4
    while [ "$1" ]; do
      name=${1%_*}
      if [ "$name" = "$kak_bufname" ]; then
        break
      fi
      offset=$(($offset + 1))
      shift
    done

    # shift list
    eval "set -- $kak_opt_buffers_info"
    offset=$(($#-$offset<10?$#-10:$offset))
    while [ "$offset" -gt "0" ]; do
        offset=$(($offset - 1))
        shift
    done

    # clear empty entries
    if [ "$#" -lt "10" ]; then
        index="$#"
        while [ "$index" -le "10" ]; do
          printf "unmap global bufs %s\n" "$(($index % 10))"
          index=$(($index + 1))
        done
    fi

    # render buffer entries
    index=1
    while [ "$1" ] && [ "$index" -le "10" ]; do
      idx=$(($index % 10))
      name=${1%_*}
      sname="${name/\'/\'\'}"
      if [ "$name" = "$kak_bufname" ]; then
        printf "map global bufs %s ':buffer %s<ret>' -docstring '> %s" "$idx" "$sname" "$sname"
      elif [ "$name" = "$kak_opt_alt_bufname" ]; then
        printf "map global bufs %s ':buffer %s<ret>' -docstring '. %s" "$idx" "$sname" "$sname"
      else
        printf "map global bufs %s ':buffer %s<ret>' -docstring '　%s" "$idx" "$sname" "$sname"
      fi

      modified=${1##*_}
      if [ "$modified" = true ]; then
        printf " [+]"
      fi
      printf "'\n"

      index=$(($index + 1))
      shift
    done
  }
}
map global bufs -docstring 'swap' 'a' 'ga'
# map global bufs -docstring 'prev' 'p' ':buffer-previous<ret>' # Qwerty
map global bufs -docstring 'prev' 't' ':buffer-previous<ret>' # Dvorak
map global bufs -docstring 'next' 'n' ':buffer-next<ret>'
map global bufs -docstring 'open' 'o' ':fzf-file<ret>'
map global bufs -docstring 'find' 'f' ':fzf-buffer<ret>'
map global bufs -docstring 'search' 's' ':fzf-search<ret>'
map global bufs -docstring ' ' ' ' ''
map global normal -docstring 'show buffer list' -- '-' ':bufs-update<ret>:enter-user-mode -lock bufs<ret>'


# FZF
# ───
define-command -docstring 'Invoke fzf to open a file' fzf-file %{
    evaluate-commands %sh{
        if [ -z "${kak_client_env_TMUX}" ]; then
            printf 'fail "client was not started under tmux"\n'
        else
            file=$(
                rg -L --hidden --files -0 |
                TMUX="${kak_client_env_TMUX}" fzf-tmux \
                    --read0 \
                    -d 30 \
                    --preview " \
                        bat --color=always \
                            --style=header,grid,numbers \
                            {} | \
                        head -n 40" \
                    --preview-window=right \
            )
            if [ -n "$file" ]; then
                file=${file/\'/\'\'}
                printf "edit '%s'\n" "$file"
            fi
        fi
    }
}

define-command -docstring 'Invoke fzf to search a file' fzf-search %{
    execute-keys '<esc>'
    prompt 'search' fzf-search-impl
}

define-command -hidden fzf-search-impl %{
    evaluate-commands %sh{
        if [ -z "${kak_client_env_TMUX}" ]; then
            printf 'fail "client was not started under tmux"\n'
        else
            tmp=$(mktemp "${TMPDIR:-/tmp}/kak-fzf.XXXXXX")
            printf "%s" "$kak_text" > $tmp
            file=$(
                rg -L --hidden -0 -l "$kak_text" |
                TMUX="${kak_client_env_TMUX}" fzf-tmux \
                    --read0 \
                    -d 30 \
                    --preview '\
                        rg "$(cat "'$tmp'")" \
                            -A 1 -B 1 \
                            --color=always \
                            {} | \
                        head -n 40' \
                    --preview-window=right \
            )
            rm -f "$tmp"
            if [ -n "$file" ]; then
                file=${file/\'/\'\'}
                printf "edit '%s'\n" "$file"
            fi
        fi
    }
}

define-command -docstring 'Invoke fzf to select a buffer' fzf-buffer %{
    evaluate-commands %sh{
        BUFFER=$(
            (
                eval "set -- $kak_buflist"
                while [ $# -gt 0 ]; do
                    printf "%s\0" "$1"
                    shift
                done
            ) |
            fzf-tmux -d 40 --read0
        )
        BUFFER=${BUFFER/\'/\'\'}
        if [ -n "$BUFFER" ]; then
            printf "buffer '%s'" "${BUFFER}"
        fi
    }
}


# Better replace command
# ──────────────────────
map global normal -docstring 'replace left hand side character' r '<a-:><a-;>;r'
map global normal -docstring 'replace right hand side character' <a-r> '<a-:>;r'
map global normal -docstring 'replace whole selection' <c-r> 'r'


# Clear Main selection
# ────────────────────
map global normal -docstring 'remove main selection' "'" <a-space>


# Set filetype
# ────────────
define-command -docstring 'Prompt for setting filetype' set-filetype %{
    prompt filetype: 'set-option buffer filetype %val{text}'
}
map global user -docstring 'set filetype' f ':set-filetype<ret>'
